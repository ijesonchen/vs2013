package dnn_pred_common

import (
	"bufio"
	"encoding/json"
	"log"
	"os"
	"strconv"
	"strings"
)

/*
{"level":"info","time":"2020-04-17T10:41:21+08:00","message":"check_point_feature: 1587091280694216153983 score 40566546 0.0038456554 [3.0879004 1.0358167 -0.77182996 -1.5599546 2.146369 -0.6988194 0.72546697 2.894236 0.5083294 1.725839 -1.3083583 2.1488888 -1.4720389 1.0335916 -0.98792785 -1.5731629 1.753144 0.49346134 0.15055475 -1.4361278 1.2386411 -0.67611927 -0.9931327 0.86417633 1.3200343 0.17201194 -0.13204086 0.396031 -0.89023274 1.1838167 0.0893995 0.6875216 -0.112392336 -0.56487477 -0.16348773 0.34753335 0.45605764 -0.4270699 -0.10101405 0.30745867 1.3036318 1.5246344 1.742355 -3.1184905 -1.3813614 -0.6495865 -0.9345425 -0.5296342 0.57434756 2.0661564 -0.096288666 -0.7082655 -0.9268927 -0.11432314 0.95413816 1.752881 0.72308755 0.013528508 1.508878 0.9275212 0.39749727 1.0847877 1.2904817 -0.27116054 -1.3541859 -0.44610915 -0.54377764 0.61935925 1.1434125 -0.08710078 -0.19299632 -0.18819362 -0.09152181 0.06473294 -0.3027597 -0.30968902 -0.2802196 0.209875 -0.19651306 0.04238954 0.0048644077 -3.297081 -3.6220489 1.4544818 -0.02979535 1.4562728 -3.5336523 -3.2348638 3.4884028 0.0154043585 -1.0778303 1.4201518 -0.12632681 0.44689572 -0.12741894 0.9491131 -0.56114674 -1.371296 -0.4216261 -0.028044088 0.7421759 0.17112273 -0.7084914 -0.58029824 -0.83155423 -0.538446 0.19142938 1.2806475 -0.34814778 -1.5887159 0.3014459 0.2652299 -1.3312467 0.5792257 0.72564167 0.21163943 0.040616192 -0.188793 0.17247924 -0.9952135 1.3990176 -3.472054 -20.527195 28.681768 2.179209 -3.087293 0.50192994 7.3122315 6.240801 -24.111246 1.8753717 -2.9586167 -0.16705538 11.741592 -5.332058 2.2817304 -2.3981893 -17.083048 1.3211265 8.435169 -0.1259286 -0.5112749 -0.20080802 0.07388447 1.1476885 -0.030050622 -0.37294045 0.29037324 -0.47080988 0.3808142 0.72578895 2.1105554 0.21470883 0.7360044 -5.0740123 1.4570715 2.0794148 -1.170622 -1.1369241 -6.787574 -1.6733308 -132.70726 3.0985563 39.896385 -3.0502174 -6.3030596 -9.307203 0.5265378 -7.6333337 135.51064 12.037351 -0.74925816 1.761838 1.1923693 -2.3019202 -5.8404183 -2.7227983 8.196464 -4.955838 1.6468036 1.201501 1.0912888 -3.7998908 4.382412 0.11422241 2.604986 0.69013596 -2.1008105 -1.0615306 -0.6608074 5.5734963 -2.0759969 1.052841 2.57331 3.846934 1.8781905 -1.3822014 -0.33163014 0.93642795 -0.17612934 -1.5828996 3.1239378 -0.10489303 1.4757719 0.9152152 -2.6461775 -1.2541982 -2.8911169 3.0102723 -4.7677073 -0.74349916 0.823612 0.11397509 0.551276 0.8454602 -0.7801589 -0.6115488 -0.02970181 1.3432492 0.6324553 -2.4388528 -2.3501675 -2.1101446 -0.083517306 -2.8223088 -0.005319797 2.07424 -0.16837108 -0.034734655 -2.7314672 3.5083468 -0.45716798 -0.9671099 -0.0034793976 3.539732 3.3297813 -3.250378 3.3272626 1.8129976 3.0406363 -3.5287323 2.9983332 -3.9953053 -3.2798042 2.946616 2.725229 -3.7420115 4.084407 -3.9286003 -3.981155 -0.49754632 0.06889747 0.712793 0.08413247 0.23730078 0.61035615 -1.0452521 1.1886027 0.33238873 -0.5705711 0.08733274 0.6148081 1.3009518 -0.08307661 0.4100208 -0.058970023 0.7232387 0.5923612 0.28467762 -0.47306636 0.09314391 0.11879046 3.4722137 -0.943384 -1.0091307 1.6130288 -0.024686994 -0.6718356 2.819735 0.5721452 -1.8826894 2.76656 4.1659555 1.5258229 -2.2531264 0.03824836 -0.028254637 -0.41262865 -0.3620171 1.6803583 2.8834352 -4.1359463 12.435475 -5.526876 2.0830984 1.9336442 -2.3867202 -1.5439415 -0.5561904 2.0641649 0.57983273 0.957292 3.0302193 2.5309026 -3.4434037 0.9621317 2.7559671 -1.836138 0.17065823 1.3448267 2.329718 -0.9548046 1.5669187 -0.39462337 2.178352 0.91697407 0.5676015 -2.543467 2.0802646 1.607512 -0.16080569 -0.36381465 -0.3450505 -1.4095825 -0.38209265 0.7033116 1.1395731 -0.36612543 -0.028691754 -1.4336723 0.22682117 1.972688 2.3783655 -2.3203256 -0.9740621 -2.4499092 2.7208607 -2.2336535 1.9864421 0.5742496 2.042562 0.44915488 0.5886889 -0.33103484 0.5635626 0.18641117 0.15314925 1.4750367 -2.5574481 -1.4323903 3.4598317 -1.7060332 -0.73057914 0.4120432 0.66324663 0.12906042 -0.32956508 -0.8872214 -0.0043426305 1.3528489 -3.3854792 3.145732 -2.670267 -0.207525 -1.4808707 -1.1140811 1.9123619 2.2137332 -3.2446115 -1.6329749 2.5367217 2.417979 -0.7261693 3.1082633 2.0669265 3.8399112 3.953309 3.8096128 2.3395793 -2.4060104 -4.8626757 8.782084 0.5729515 5.3392324 0.5978381 10.98394 14.781475 -1.911706 -7.0225477 3.0711658 -0.08196697 -0.15069535 -0.29706174 1.0790257 -1.1020185 2.0507185 1.617925 -0.7480767 -0.8472035 0.819592 -2.1616735 0.7831927 0.46639693 -0.28835538 1.0315442 -1.1463674 -0.81843597 0.98874533 -0.28129432 0.31113765 -0.28824154 1.1003408 -0.08989422 0.0002186935 0.12852462 -0.3457676 0.21774645 -0.37092546 -0.879979 -1.0687518 -0.5461666 -0.27857515 0.83436924 0.12363262 -0.16538943 -0.22222498 0.745233 0.43001947 0.20001638 0.47947043 -144.48038 -66.18438 -114.7972 -38.37374 -242.57527 -147.4102 28.090065 -51.16492 70.702225 -45.124508]"}

util.LogInfof("check_point_feature: %s score %d %v %v", reqID, id, score[i], retInput[i])
*/

func parseZeroType(line string) int {
	for k, v := range zeroTypeMap {
		if strings.Contains(line, k) {
			return v
		}
	}
	return zeroTypeInvalid
}

func parseZeroReq(line string) (reqData *ReqData, ok bool) {
	// check_point_req: 1587723561505345115102 {\"Uid\":\"99430517\",\"Docid\":[9306341,221540,36065153,38949250,1931601,40763416,40864992,40499194,1548340,318975,40700219,23883418,4005452,38874720,40734736,20824642,15115584,450992,40734594,11250360,38248882,160067,40731404,39027405,338681,118927,40709733,137253,1634140,5524954,40872962,15401286,20934220,2404192,40731246,40565286,1782765,307732,40706017,3136525,11243898,40855225,40789121,135138,40559592,60799,40609008,40625189,1108818,11092397,40767024,40656957,78506,12287826,40766379,1120793,92054,40495563,40865293,40715071,35657307,40759804,1771564,40500631,40851404,332875,40766825,40781484,1360604,38147196,40188325,38463526,40306629,40741989,2489831,2463460,40786824,92179,40240847,27538482,40524347,40491068,136629,40904320,1096690,40904580,867837,40414232,334596,40810803,40686764,40780245,5558843,40877157,3661095,18594237,3136293,40878074,1152518,1121459,7603858,1103277,7134471,7423487,102720,38880071,13445573,32887531,23969758,129310,2245969,39501018,1183553,18394319,1681078,1917583,609132,1130294,1067007,40671946,463083,149336,24904610,38451058,21303475,1354434,4411533,40530909,1102465,34188646,416704,40636034,1381812,132715,38805672,32872003,3336240,40728940,1458056,38253,5141049,1896495,29842,38732017,2316845,3006766,587493,12412590,16963119,883873,39564689,40763698,1588512,956619,2828472,301938,112500,3095949,1898702,40766144,35151188,26299706,1824615,454741,40690431,25503004,652465,105264,38953798,11879833,40969410,14035726,1892298,40925256,40641862,42170,40765306,2463834,40885528,37683240,30675730,11908017,40977664,40933906,38948000,2462754,40933459,2404251,1097570,692734,40906222,36223241,39661973,6997785,38878046,347817,40791617,40746807,38590263,40039370,10671662,40838018,39337264,1538010,40760862,40840341,1935194,40810850,39344020,40770031,39970540,55769,40852370,4038222,40831079,40602797,1449798,40833972,40685978,40940444,40882827,40933030,38711627,40675665,40607914,31673471,38382443,32185525,1600946,40894015,32377650,89664,4505404,1367782,40838427,40936103,40790269,5173593,23908050,3221792,22777472,40901264,2843269,3229429,40719088,38247,40661572,470029,40719272,14908820,16561180,40874886,17572760,327077,40660403,40640984,2317733,40882592,1473197,40777084,33880098,10751761,40721746,34145140,2279770,40856367,58739,40945071,1843009,40213212,40924926,38965416,128715,40905444,23313449,40682871,40920033,40877212,169485,40745118,40740941,2403393,40823858,17193898,23229667,40885304,2490695,261056,40785860,106440,40040908,16796042,41012,4709690,40739082,85322,40722313,12860561,40886300,1612289,1249066,40811059,39032439,40676527,109338,109390,65761,43636,63153,1010647,41185,40509839,1408384,1043737,14999244,31979690,1043999,12505922,40777,12505747,40502669,117179,29821669,1773839,2490084,18196323,40553560,33903825,45532,18402648,21865397,40574810,84856,40912518,2490187,347802,45780,40486702,4212438,13207082,40523907,32891507,40766,40584692,11517102,37966079,21213957,140731,938162,7942513,304926,363321,21698635,29463893,32893717,66400,1829455,24173987,6699789,29779433,891076,40579890,27941670,6776532,40781808,40514929,40672757,40816587,22825,36941337,1397815,479443,40754190,40775,5602448,14102429,40579858,43421,40499728,93416,40482265,1686642,40511354,29247623,40615894,40495292,38877601,40585484,40535283,39970076,40862831,40557705,40585468,32922881,40039086,132127,37639906,39633266,38564404,15968533,40038603,39951832,40201721,40013362,38057629,33936814,5900118,39947762,40216121,39947683,319035,40201780,40752396,40785817,487213,4311476,19893622,27185481,4782476,40706774,40652250,19289243,40817394,40201766,9294923,1173541,39889687,40632479,38377681,33942559,40739000,29166781,40822918,38949433,2287209,40197265,125230,31986984,14198432,40664809,28338,40678031,39977142,40671496,40458294,40757451,40470841,40855930,40704543,40768199,40786058,1450744,4265885,40764526,40712849,40698841,40657253,40559919,40714198,40481758,40698720,40774422,40918664,40777648,1440486,40794384,40770599,40772442,40495109,40813940,40966686,40777542,2072061,40801197,40928523,40656277,40928234,40780309,40841570,13010023,40984542,40489690,40822081,38225070,40657495,40480898,40676810,40656261,40676784,40396420,40698615,40748798,40712579,40766191,40698811,40464852,40739972,40604876,39394416,40780536],\"ContextFeature\":{\"Feature\":[{\"FeatureName\":\"c_2_position\",\"FeatureValue\":{\"StringValue\":\"nav.1.精选.1\"}},{\"FeatureName\":\"c_2_version_position\",\"FeatureValue\":{\"StringValue\":\"2.7.4|nav.1.精选.1\"}},{\"FeatureName\":\"c_2_scene\",\"FeatureValue\":{\"StringValue\":\"10\"}},{\"FeatureName\":\"c_2_version_scene\",\"FeatureValue\":{\"StringValue\":\"2.7.4|10\"}},{\"FeatureName\":\"c_2_engine_scence\",\"FeatureValue\":{\"StringValue\":\"11_1234__0\"}},{\"FeatureName\":\"c_2_version\",\"FeatureValue\":{\"StringValue\":\"2.7.4\"}},{\"FeatureName\":\"c_2_pagecount\",\"FeatureValue\":{\"StringValue\":\"10\"}},{\"FeatureName\":\"c_2_hour\",\"FeatureValue\":{\"StringValue\":\"18\"}},{\"FeatureName\":\"c_2_timedur\",\"FeatureValue\":{\"StringValue\":\"2\"}},{\"FeatureName\":\"c_2_weekday\",\"FeatureValue\":{\"StringValue\":\"5\"}},{\"FeatureName\":\"c_2_month\",\"FeatureValue\":{\"StringValue\":\"4\"}},{\"FeatureName\":\"c_2_network\",\"FeatureValue\":{\"StringValue\":\"0\"}},{\"FeatureName\":\"c_3_pagenum\",\"FeatureValue\":{\"FloatValue\":1}},{\"FeatureName\":\"c_2_pagedirect\",\"FeatureValue\":{\"StringValue\":\"0\"}},{\"FeatureName\":\"c_2_region\",\"FeatureValue\":{\"StringValue\":\"110100\"}}]}}
	seps := strings.Split(line, " ")
	const sepCount = 3
	if len(seps) != sepCount {
		log.Printf("parseZeroReq msg len error %d %v", len(seps), sepCount)
		return
	}
	//jStr, err := strconv.Unquote("\"" + seps[2] + "\"")
	//if err != nil {
	//	log.Printf("parseZeroReq unquote [%s] error [%v]", seps[2], err)
	//	return
	//}
	var d struct {
		Uid   string
		DocId []int64
	}
	err := json.Unmarshal([]byte(seps[2]), &d)
	if err != nil {
		log.Printf("parseZeroReq unmarshal [%s] error [%v]", seps[2], err)
		return
	}
	reqData = &ReqData{
		Rid:     seps[1],
		Uid:     d.Uid,
		ItemIds: d.DocId,
		ItemFea: make(map[int64]string, len(d.DocId)),
	}
	reqData.IidIdxMap = make(map[int64]int, len(reqData.ItemIds))
	for i, iid := range reqData.ItemIds {
		reqData.IidIdxMap[iid] = i
	}
	ok = len(reqData.ItemIds) > 0
	return
}

func parseZeroUser(line string) (req, fea string, ok bool) {
	// check_point_user: 1587716566071467897194 k@v|-|...
	seps := strings.Split(line, " ")
	const sepCount = 3
	if len(seps) < sepCount {
		log.Printf("parseZeroUser msg len error %d %v", len(seps), sepCount)
		return
	}
	req = seps[1]
	fea = line[strings.Index(line, req)+len(req)+1:]
	ok = true
	return
}

func parseZeroItem(line string) (req string, iid int64, fea string, ok bool) {
	// check_point_item: 1587716566071467897194 item 195240 k@v|-|...
	seps := strings.Split(line, " ")
	const sepCount = 5
	if len(seps) < sepCount {
		log.Printf("parseZeroItem msg len error %d %v", len(seps), sepCount)
		return
	}
	req = seps[1]
	if "item" != seps[2] {
		log.Printf("parseZeroItem seps[2] should be item %s", seps[2])
		return
	}
	var err error
	iid, err = strconv.ParseInt(seps[3], 10, 64)
	if err != nil {
		log.Printf("parseZeroItem iid %s error %v", seps[3], err)
		return
	}
	fea = line[strings.Index(line, seps[3])+len(seps[3])+1:]
	ok = true
	return
}

func parseZeroScore(msg string) (data CheckPoint, ok bool) {
	// check_point_score: 111111111 2367092 0.001332 [0.03977116,0.0076476964]
	seps := strings.Split(msg, " ")
	const sepCount = 5
	if len(seps) != sepCount {
		log.Printf("parseZeroScore msg len error %d %v", len(seps), sepCount)
		return
	}
	var err error
	data.Rid = seps[1]
	data.Iid, err = strconv.ParseInt(seps[2], 10, 64)
	if err != nil {
		log.Printf("parse iid %s error %v", seps[2], err)
		return
	}
	score, err := strconv.ParseFloat(seps[3], 64)
	if err != nil {
		log.Printf("parse score %s error %v", seps[3], err)
		return
	}
	data.Score = float32(score)

	err = json.Unmarshal([]byte(seps[4]), &data.Embed)
	if err != nil {
		log.Printf("parse embedding %s error %v", seps[4], err)
	}

	ok = true
	return
}

func AppendZeroLog(path string, data map[string]map[int64]*CheckPoint) (reqMap map[string]*ReqData) {
	if data == nil {
		log.Println("invalid nil data")
		return
	}
	file, err := os.Open(path)
	if err != nil {
		log.Printf("open %s error %v", path, err)
		return
	}
	reqMap = make(map[string]*ReqData)
	var reqData *ReqData
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		buf := scanner.Bytes()
		if len(buf) == 0 {
			continue
		}
		var oneLog logData
		err = json.Unmarshal(buf, &oneLog)
		if err != nil {
			log.Printf("unmarshal error %v", err)
			continue
		}
		//log.Printf("%v %v", oneLog.Level, oneLog.Time)
		msg := oneLog.Message
		msgType := parseZeroType(msg)
		switch msgType {
		case zeroTypeInvalid:
			continue
		case zeroTypeReq:
			reqData, ok := parseZeroReq(msg)
			if ok {
				reqData0, ok := reqMap[reqData.Rid]
				if ok {
					reqData.ItemIds = append(reqData.ItemIds, reqData0.ItemIds...)
					reqData.ItemFea = make(map[int64]string, len(reqData.ItemIds))
				}
				reqMap[reqData.Rid] = reqData
			}
		case zeroTypeUser:
			req, fea, ok := parseZeroUser(msg)
			if ok {
				if reqData, ok = reqMap[req]; ok {
					reqData.UserFea = fea
				}
			}
		case zeroTypeItem:
			req, iid, fea, ok := parseZeroItem(msg)
			if ok {
				if reqData, ok = reqMap[req]; ok {
					reqData.ItemFea[iid] = fea
				}
			}
		case zeroTypeScore:
			d, ok := parseZeroScore(msg)
			if ok {
				if _, ok := data[d.Rid]; ok {
					data[d.Rid][d.Iid].Score = d.Score
					data[d.Rid][d.Iid].Embed = d.Embed
				} else {
					log.Printf("score not found %s %d", d.Rid, d.Iid)
				}
			}
		default:
			log.Printf("error invalid msg type %d", msgType)
		}
	}
	return
}

// reqMap: rid -> ReqData
func LoadZeroLog(path string) (data map[string]map[int64]*CheckPoint, reqMap map[string]*ReqData) {
	file, err := os.Open(path)
	if err != nil {
		log.Printf("open %s error %v", path, err)
		return
	}
	reqMap = make(map[string]*ReqData)
	data = make(map[string]map[int64]*CheckPoint)
	var reqData *ReqData
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		buf := scanner.Bytes()
		if len(buf) == 0 {
			continue
		}
		var oneLog logData
		err = json.Unmarshal(buf, &oneLog)
		if err != nil {
			log.Printf("unmarshal error %v", err)
			continue
		}
		//log.Printf("%v %v", oneLog.Level, oneLog.Time)
		msg := oneLog.Message
		msgType := parseZeroType(msg)
		switch msgType {
		case zeroTypeInvalid:
			continue
		case zeroTypeReq:
			reqData, ok := parseZeroReq(msg)
			if ok {
				reqData0, ok := reqMap[reqData.Rid]
				if ok {
					reqData.ItemIds = append(reqData.ItemIds, reqData0.ItemIds...)
					reqData.ItemFea = make(map[int64]string, len(reqData.ItemIds))
				}
				reqMap[reqData.Rid] = reqData
			}
		case zeroTypeUser:
			req, fea, ok := parseZeroUser(msg)
			if ok {
				if reqData, ok = reqMap[req]; ok {
					reqData.UserFea = fea
				}
			}
		case zeroTypeItem:
			req, iid, fea, ok := parseZeroItem(msg)
			if ok {
				if reqData, ok = reqMap[req]; ok {
					reqData.ItemFea[iid] = fea
				}
			}
		case zeroTypeScore:
			d, ok := parseZeroScore(msg)
			if ok {
				var mcp map[int64]*CheckPoint
				if mcp, ok = data[d.Rid]; !ok {
					mcp = make(map[int64]*CheckPoint)
					data[d.Rid] = mcp
				}
				var pcp *CheckPoint
				if pcp, ok = mcp[d.Iid]; !ok {
					pcp = &CheckPoint{}
					mcp[d.Iid] = pcp
				}
				pcp.Score = d.Score
				pcp.Embed = d.Embed
			}
		default:
			log.Printf("error invalid msg type %d", msgType)
		}
	}
	return
}
